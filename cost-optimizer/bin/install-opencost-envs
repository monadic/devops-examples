#!/bin/bash
# Create environment hierarchy for OpenCost
# Following the canonical global-app pattern: base → dev → staging → prod

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "🏭 Creating OpenCost Environment Hierarchy"
echo "="*50

# Get project from file
if [ ! -f .cub-opencost-project ]; then
    echo -e "${RED}Error: .cub-opencost-project not found. Run install-opencost-base first${NC}"
    exit 1
fi

project=$(cat .cub-opencost-project)
echo -e "${GREEN}Using project: $project${NC}"

# Create environment spaces
echo -e "\n${YELLOW}Creating environment spaces...${NC}"

envs=("dev" "staging" "prod")
for env in "${envs[@]}"; do
    echo "Creating $project-$env..."
    cub space create $project-$env \
      --label app=opencost \
      --label env=$env || true
done

echo -e "${GREEN}✓ Created environment spaces${NC}"

# Clone units from base to environments with upstream relationships
echo -e "\n${YELLOW}Setting up environment hierarchy...${NC}"

# Get base units
base_units=$(cub unit list --space $project-base --format json | jq -r '.[].name // empty' 2>/dev/null || echo "")

if [ -z "$base_units" ]; then
    echo -e "${YELLOW}No base units found. They will be created when you run apply-opencost${NC}"
else
    echo "Found base units: $(echo $base_units | tr '\n' ' ')"
    
    # Clone to dev with upstream from base
    echo -e "\nCloning to dev environment..."
    for unit in $base_units; do
        echo "  Cloning $unit to dev..."
        base_unit_id=$(cub unit get $unit --space $project-base --format json | jq -r '.id // empty' 2>/dev/null || echo "")
        if [ ! -z "$base_unit_id" ]; then
            # Create dev unit with upstream pointing to base
            cub unit clone $unit \
              --source-space $project-base \
              --dest-space $project-dev \
              --upstream-unit $base_unit_id \
              --label env=dev || true
        fi
    done
    
    # Clone to staging with upstream from dev
    echo -e "\nCloning to staging environment..."
    dev_units=$(cub unit list --space $project-dev --format json | jq -r '.[].name // empty' 2>/dev/null || echo "")
    for unit in $dev_units; do
        echo "  Cloning $unit to staging..."
        dev_unit_id=$(cub unit get $unit --space $project-dev --format json | jq -r '.id // empty' 2>/dev/null || echo "")
        if [ ! -z "$dev_unit_id" ]; then
            cub unit clone $unit \
              --source-space $project-dev \
              --dest-space $project-staging \
              --upstream-unit $dev_unit_id \
              --label env=staging || true
        fi
    done
    
    # Clone to prod with upstream from staging
    echo -e "\nCloning to production environment..."
    staging_units=$(cub unit list --space $project-staging --format json | jq -r '.[].name // empty' 2>/dev/null || echo "")
    for unit in $staging_units; do
        echo "  Cloning $unit to production..."
        staging_unit_id=$(cub unit get $unit --space $project-staging --format json | jq -r '.id // empty' 2>/dev/null || echo "")
        if [ ! -z "$staging_unit_id" ]; then
            cub unit clone $unit \
              --source-space $project-staging \
              --dest-space $project-prod \
              --upstream-unit $staging_unit_id \
              --label env=prod || true
        fi
    done
fi

echo -e "${GREEN}✓ Set up environment hierarchy${NC}"

# Create environment-specific filters
echo -e "\n${YELLOW}Creating environment filters...${NC}"

for env in "${envs[@]}"; do
    cub filter create opencost-$env Unit \
      --where-field "Space.Name='$project-$env'" \
      --space $project-filters || true
done

echo -e "${GREEN}✓ Created environment filters${NC}"

# Create promotion Sets
echo -e "\n${YELLOW}Creating promotion Sets...${NC}"

cub set create ready-for-staging --space $project-sets \
  --label promotion=staging || true

cub set create ready-for-prod --space $project-sets \
  --label promotion=prod || true

echo -e "${GREEN}✓ Created promotion Sets${NC}"

echo -e "\n${GREEN}🎉 OpenCost environment setup complete!${NC}"
echo -e "\nEnvironment Hierarchy:"
echo "  base → dev → staging → prod"
echo -e "\nPromotion flow:"
echo "  1. Make changes in $project-base"
echo "  2. Push-upgrade propagates to dev automatically"
echo "  3. Test in dev, then push-upgrade to staging"
echo "  4. Test in staging, then push-upgrade to prod"
echo -e "\nNext steps:"
echo "1. Run ./bin/configure-opencost-cloud to set up cloud configs"
echo "2. Run ./bin/apply-opencost dev to deploy to dev"
echo "3. Use ./bin/promote-opencost dev staging to promote"