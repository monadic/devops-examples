#!/bin/bash
# Deploy OpenCost as a DevOps App using ConfigHub units
# This follows the canonical global-app pattern

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "ðŸš€ Installing OpenCost as DevOps App with ConfigHub"
echo "="*50

# Check if cub is available
if ! command -v cub &> /dev/null; then
    echo -e "${RED}Error: cub CLI not found. Please install ConfigHub CLI first${NC}"
    exit 1
fi

# Generate unique prefix (canonical pattern)
prefix=$(cub space new-prefix)
if [ -z "$prefix" ]; then
    echo -e "${RED}Failed to generate prefix. Using fallback${NC}"
    prefix="opencost-$(date +%s)"
fi

project="${prefix}-opencost"
echo -e "${GREEN}âœ“ Generated unique prefix: $prefix${NC}"
echo "$project" > .cub-opencost-project

# Create ConfigHub spaces
echo -e "\n${YELLOW}Creating ConfigHub spaces...${NC}"
cub space create $project --label app=opencost || true
cub space create $project-base --label base=true || true
cub space create $project-filters --label type=filters || true
cub space create $project-sets --label type=sets || true

echo -e "${GREEN}âœ“ Created ConfigHub space structure${NC}"

# Create filters for OpenCost components
echo -e "\n${YELLOW}Creating filters...${NC}"
cub filter create opencost-all Unit \
  --where-field "Space.Labels.app='opencost'" \
  --space $project-filters || true

cub filter create opencost-deployments Unit \
  --where-field "Labels.type='deployment' AND Space.Labels.app='opencost'" \
  --space $project-filters || true

cub filter create opencost-configs Unit \
  --where-field "Labels.type='config' AND Space.Labels.app='opencost'" \
  --space $project-filters || true

echo -e "${GREEN}âœ“ Created filters${NC}"

# Create Sets for grouping
echo -e "\n${YELLOW}Creating Sets...${NC}"
cub set create core-components --space $project-sets \
  --label category=core || true

cub set create cloud-configs --space $project-sets \
  --label category=config || true

echo -e "${GREEN}âœ“ Created Sets${NC}"

# Create OpenCost deployment unit
echo -e "\n${YELLOW}Creating OpenCost deployment unit...${NC}"
cat > /tmp/opencost-deployment.yaml <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opencost
  namespace: opencost
  labels:
    app: opencost
    tier: infrastructure
    managed-by: confighub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opencost
  template:
    metadata:
      labels:
        app: opencost
    spec:
      serviceAccountName: opencost
      containers:
      - name: opencost
        image: quay.io/kubecost1/opencost:latest
        env:
        - name: PROMETHEUS_SERVER_ENDPOINT
          value: "http://prometheus-server:80"
        - name: CLOUD_PROVIDER_API_KEY
          valueFrom:
            secretKeyRef:
              name: opencost-cloud-config
              key: api-key
              optional: true
        - name: CLUSTER_ID
          value: "primary-cluster"
        ports:
        - containerPort: 9003
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 9003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 9003
          initialDelaySeconds: 5
          periodSeconds: 10
EOF

cub unit create opencost-deployment /tmp/opencost-deployment.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=deployment \
  --label managed-by=devops-app || true

echo -e "${GREEN}âœ“ Created OpenCost deployment unit${NC}"

# Create OpenCost service unit
cat > /tmp/opencost-service.yaml <<EOF
apiVersion: v1
kind: Service
metadata:
  name: opencost
  namespace: opencost
  labels:
    app: opencost
spec:
  selector:
    app: opencost
  type: ClusterIP
  ports:
  - name: http
    port: 9003
    targetPort: 9003
EOF

cub unit create opencost-service /tmp/opencost-service.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=service || true

echo -e "${GREEN}âœ“ Created OpenCost service unit${NC}"

# Create namespace unit
cat > /tmp/opencost-namespace.yaml <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: opencost
  labels:
    app: opencost
    managed-by: confighub
EOF

cub unit create opencost-namespace /tmp/opencost-namespace.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=namespace || true

# Create ServiceAccount unit
cat > /tmp/opencost-sa.yaml <<EOF
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opencost
  namespace: opencost
  labels:
    app: opencost
EOF

cub unit create opencost-sa /tmp/opencost-sa.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=serviceaccount || true

# Create ClusterRole unit
cat > /tmp/opencost-clusterrole.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: opencost
rules:
- apiGroups: [""]
  resources:
  - pods
  - nodes
  - namespaces
  - persistentvolumes
  - persistentvolumeclaims
  - services
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources:
  - deployments
  - statefulsets
  - daemonsets
  - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
  - jobs
  - cronjobs
  verbs: ["get", "list", "watch"]
- apiGroups: ["storage.k8s.io"]
  resources:
  - storageclasses
  verbs: ["get", "list", "watch"]
EOF

cub unit create opencost-clusterrole /tmp/opencost-clusterrole.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=rbac || true

# Create ClusterRoleBinding unit
cat > /tmp/opencost-clusterrolebinding.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: opencost
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: opencost
subjects:
- kind: ServiceAccount
  name: opencost
  namespace: opencost
EOF

cub unit create opencost-clusterrolebinding /tmp/opencost-clusterrolebinding.yaml \
  --space $project-base \
  --label tier=infrastructure \
  --label type=rbac || true

echo -e "${GREEN}âœ“ Created all OpenCost base units${NC}"

# Add units to Sets
echo -e "\n${YELLOW}Adding units to Sets...${NC}"
cub set add-unit core-components opencost-deployment --space $project-sets || true
cub set add-unit core-components opencost-service --space $project-sets || true

echo -e "${GREEN}âœ“ Added units to Sets${NC}"

echo -e "\n${GREEN}ðŸŽ‰ OpenCost base setup complete!${NC}"
echo -e "\nNext steps:"
echo "1. Run ./bin/install-opencost-envs to create environment hierarchy"
echo "2. Run ./bin/configure-opencost-cloud to set up cloud provider configs"
echo "3. Run ./bin/apply-opencost dev to deploy to dev environment"
echo -e "\nProject: ${YELLOW}$project${NC}"
echo "ConfigHub Spaces:"
echo "  - $project (main)"
echo "  - $project-base (base units)"
echo "  - $project-filters (filters)"
echo "  - $project-sets (sets)"