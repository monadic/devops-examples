#!/bin/bash
# Deploy OpenCost to specified environment using ConfigHub
# Usage: ./apply-opencost [env]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check arguments
if [ $# -eq 0 ]; then
    echo "Usage: $0 [dev|staging|prod]"
    exit 1
fi

ENV=$1

# Validate environment
if [[ ! "$ENV" =~ ^(dev|staging|prod)$ ]]; then
    echo -e "${RED}Error: Invalid environment '$ENV'. Must be dev, staging, or prod${NC}"
    exit 1
fi

echo "ðŸš€ Deploying OpenCost to $ENV environment"
echo "="*50

# Get project from file
if [ ! -f .cub-opencost-project ]; then
    echo -e "${RED}Error: .cub-opencost-project not found. Run install-opencost-base first${NC}"
    exit 1
fi

project=$(cat .cub-opencost-project)
echo -e "${GREEN}Project: $project${NC}"
echo -e "${GREEN}Environment: $ENV${NC}"

# Check if space exists
echo -e "\n${YELLOW}Verifying ConfigHub space...${NC}"
if ! cub space get $project-$ENV &>/dev/null; then
    echo -e "${RED}Error: Space $project-$ENV not found. Run install-opencost-envs first${NC}"
    exit 1
fi
echo -e "${GREEN}âœ“ Space $project-$ENV exists${NC}"

# Check Kubernetes connectivity
echo -e "\n${YELLOW}Checking Kubernetes cluster...${NC}"
if ! kubectl cluster-info &>/dev/null; then
    echo -e "${RED}Error: Cannot connect to Kubernetes cluster${NC}"
    exit 1
fi
echo -e "${GREEN}âœ“ Connected to Kubernetes cluster${NC}"

# Apply units in correct order
echo -e "\n${YELLOW}Applying OpenCost units to Kubernetes...${NC}"

# Order matters for dependencies
declare -a units_order=(
    "opencost-namespace"
    "opencost-sa"
    "opencost-clusterrole"
    "opencost-clusterrolebinding"
    "opencost-cloud-config-$ENV"
    "opencost-configmap-$ENV"
    "opencost-deployment"
    "opencost-service"
)

for unit in "${units_order[@]}"; do
    echo -e "\nApplying $unit..."
    
    # Check if unit exists in space
    if cub unit get $unit --space $project-$ENV &>/dev/null; then
        # Apply the unit
        output=$(cub unit apply $unit --space $project-$ENV 2>&1 || true)
        
        if echo "$output" | grep -q "successfully applied"; then
            echo -e "  ${GREEN}âœ“ Applied $unit${NC}"
        elif echo "$output" | grep -q "already exists"; then
            echo -e "  ${BLUE}â†’ $unit already exists (updating)${NC}"
            # Try to patch/update if already exists
            cub unit apply $unit --space $project-$ENV --update || true
        else
            echo -e "  ${YELLOW}âš  $unit: $output${NC}"
        fi
    else
        echo -e "  ${YELLOW}âš  Unit $unit not found in space $project-$ENV${NC}"
    fi
done

echo -e "\n${GREEN}âœ“ Applied all OpenCost units${NC}"

# Wait for deployment to be ready
echo -e "\n${YELLOW}Waiting for OpenCost deployment to be ready...${NC}"
kubectl wait --for=condition=available --timeout=120s \
    deployment/opencost -n opencost 2>/dev/null || {
    echo -e "${YELLOW}OpenCost deployment not ready yet. Check with: kubectl get pods -n opencost${NC}"
}

# Check OpenCost pod status
echo -e "\n${YELLOW}OpenCost pod status:${NC}"
kubectl get pods -n opencost -l app=opencost 2>/dev/null || echo "Namespace or pods not found yet"

# Get service info
echo -e "\n${YELLOW}OpenCost service info:${NC}"
kubectl get svc opencost -n opencost 2>/dev/null || echo "Service not found yet"

# Create port-forward script
cat > /tmp/opencost-port-forward-$ENV.sh <<EOF
#!/bin/bash
echo "Port-forwarding OpenCost UI to http://localhost:9003"
kubectl port-forward -n opencost svc/opencost 9003:9003
EOF
chmod +x /tmp/opencost-port-forward-$ENV.sh

echo -e "\n${GREEN}ðŸŽ‰ OpenCost deployment complete for $ENV!${NC}"
echo -e "\nOpenCost API Endpoints:"
echo "  - Internal: http://opencost.opencost.svc.cluster.local:9003"
echo "  - Metrics: http://opencost.opencost.svc.cluster.local:9003/metrics"
echo "  - Allocation API: http://opencost.opencost.svc.cluster.local:9003/allocation/compute"
echo -e "\nTo access OpenCost UI:"
echo "  /tmp/opencost-port-forward-$ENV.sh"
echo "  Then visit: http://localhost:9003"
echo -e "\nTo check status:"
echo "  kubectl get pods -n opencost"
echo "  kubectl logs -n opencost -l app=opencost"
echo -e "\nTo promote to next environment:"
if [ "$ENV" = "dev" ]; then
    echo "  ./bin/promote-opencost dev staging"
elif [ "$ENV" = "staging" ]; then
    echo "  ./bin/promote-opencost staging prod"
fi