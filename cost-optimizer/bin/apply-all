#!/bin/bash

# Apply cost-optimizer to a specific environment via ConfigHub
# Following the global-app pattern for ConfigHub-driven deployment

set -e

if [ ! -e ".cub-project" ]; then
  echo "Run bin/install-base first to create the base configuration"
  exit 1
fi

project=$(cat .cub-project)
env=${1:-dev}
space=$project-$env

echo "üöÄ Applying cost-optimizer to $env environment..."
echo "Space: $space"
echo ""

# Apply units in correct dependency order
echo "Applying units in dependency order..."

echo "  üì¶ Applying namespace..."
cub unit apply namespace --space $space

echo "  üîê Applying RBAC..."
cub unit apply cost-optimizer-rbac --space $space

echo "  ‚öôÔ∏è  Applying configuration..."
cub unit apply cost-optimizer-config --space $space

echo "  üåê Applying service..."
cub unit apply cost-optimizer-service --space $space

echo "  üöÄ Applying deployment..."
cub unit apply cost-optimizer-deployment --space $space

# Note: Bulk apply using filters (when all units need to be applied together)
# This would require creating a filter first, then using it
echo ""
echo "Note: For bulk operations, create a filter and use it:"
echo "  cub filter create cost-optimizer-units Unit --where-field \"Labels.app = 'cost-optimizer'\" --space $project-filters"
echo "  Then use the filter for bulk operations"

echo ""
echo "‚úÖ Deployment complete!"
echo ""
echo "Verify deployment:"
echo "  kubectl get pods -n devops-apps -l app=cost-optimizer"
echo "  kubectl get services -n devops-apps -l app=cost-optimizer"
echo ""
echo "Access the cost optimizer:"
echo "  Dashboard: kubectl port-forward svc/cost-optimizer-dashboard 8081:8081 -n devops-apps"
echo "  Health:    kubectl port-forward svc/cost-optimizer-dashboard 8080:8080 -n devops-apps"
echo "  Then visit: http://localhost:8081"
echo ""
echo "View logs:"
echo "  kubectl logs -f deployment/cost-optimizer -n devops-apps"
echo ""
echo "Check ConfigHub units:"
echo "  cub unit list --space $space --show-status"