#!/bin/bash
# Create a local Kind cluster for testing drift detection

set -e

CLUSTER_NAME="devops-test"

echo "🔧 Creating Kind cluster: $CLUSTER_NAME"

# Check if Kind is installed
if ! command -v kind &> /dev/null; then
    echo "❌ Error: kind not found. Please install Kind first:"
    echo "   brew install kind  # macOS"
    echo "   # Or visit: https://kind.sigs.k8s.io/"
    exit 1
fi

# Check if cluster already exists
if kind get clusters | grep -q "^$CLUSTER_NAME$"; then
    echo "ℹ️  Cluster $CLUSTER_NAME already exists"
    echo "   To recreate: kind delete cluster --name $CLUSTER_NAME"
else
    # Create cluster configuration
    cat > /tmp/kind-config.yaml <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: $CLUSTER_NAME
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "environment=test,cluster=kind"
  extraPortMappings:
  - containerPort: 30000
    hostPort: 30000
    protocol: TCP
  - containerPort: 30001
    hostPort: 30001
    protocol: TCP
EOF

    # Create the cluster
    kind create cluster --config /tmp/kind-config.yaml
    rm /tmp/kind-config.yaml

    echo "✅ Cluster created successfully"
fi

# Set kubectl context
kubectl config use-context kind-$CLUSTER_NAME

# Wait for cluster to be ready
echo "⏳ Waiting for cluster to be ready..."
kubectl wait --for=condition=Ready nodes --all --timeout=60s

# Create drift-test namespace
echo "📦 Creating drift-test namespace..."
kubectl create namespace drift-test --dry-run=client -o yaml | kubectl apply -f -

# Label the namespace
kubectl label namespace drift-test \
    environment=test \
    monitored=true \
    project=drift-detector \
    --overwrite

echo ""
echo "✅ Kind cluster ready!"
echo ""
echo "Cluster: $CLUSTER_NAME"
echo "Context: kind-$CLUSTER_NAME"
echo "Namespace: drift-test"
echo ""
echo "Next steps:"
echo "  ./bin/deploy-test  # Deploy test workloads"
echo "  ./drift-detector   # Run drift detection"