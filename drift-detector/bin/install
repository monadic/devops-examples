#!/bin/bash
# Install script for drift-detector
# Sets up ConfigHub resources and prepares the environment

set -e

echo "🚀 Drift Detector Installation"
echo "=============================="

# Check for required tools
if ! command -v cub &> /dev/null; then
    echo "❌ Error: cub CLI not found. Please install ConfigHub CLI first."
    exit 1
fi

if ! command -v kubectl &> /dev/null; then
    echo "⚠️  Warning: kubectl not found. Kubernetes features will be limited."
fi

# Check for ConfigHub authentication
if ! cub auth get-token &> /dev/null; then
    echo "❌ Error: Not authenticated with ConfigHub. Run: cub auth login"
    exit 1
fi

# Check if project already exists
if [ -e ".drift-detector-project" ]; then
    echo "ℹ️  Project already initialized. Using existing configuration."
    project=$(cat .drift-detector-project)
else
    # Generate unique project name
    if [ -z "$1" ]; then
        project="drift-detector-$(date +%s)"
    else
        project=$1
    fi
    echo $project > .drift-detector-project
fi

echo "📋 Setting up ConfigHub resources for project: $project"

# Create main space for drift detector
echo "  Creating space: $project..."
cub space create $project --label type=devops-app --label app=drift-detector || true

# Create filters space
echo "  Creating filters space..."
cub space create $project-filters --label type=filters --label project=$project || true

# Create filters for drift detection
echo "  Creating filters..."
cub filter create critical-services Unit \
    --where-field "Labels.tier = 'critical'" \
    --space $project-filters || true

cub filter create production-only Unit \
    --where-field "Labels.environment = 'production'" \
    --space $project-filters || true

cub filter create high-replicas Unit \
    --where-data "spec.replicas > 3" \
    --space $project-filters || true

# Create set for critical services
echo "  Creating sets..."
cub set create critical-set \
    --space $project \
    --label tier=critical \
    --label monitor=true || true

# Create base configuration units
echo "  Creating base units..."
if [ -d "baseconfig" ]; then
    for config in baseconfig/*.yaml; do
        if [ -f "$config" ]; then
            name=$(basename "$config" .yaml)
            echo "    - $name"
            cub unit create $name "$config" \
                --space $project \
                --label type=config \
                --label monitor=true || true
        fi
    done
fi

# Set up Kubernetes target if kubectl is available
if command -v kubectl &> /dev/null; then
    echo "  Setting up Kubernetes target..."

    # Get current context
    context=$(kubectl config current-context 2>/dev/null || echo "default")

    # Create target configuration
    cat > /tmp/k8s-target.yaml <<EOF
apiVersion: v1
kind: Target
metadata:
  name: k8s-cluster
spec:
  type: kubernetes
  config:
    context: $context
    namespace: drift-test
EOF

    cub unit create k8s-target /tmp/k8s-target.yaml \
        --space $project \
        --label type=target \
        --label targetable=true || true

    rm /tmp/k8s-target.yaml
fi

# Save configuration for the app
cat > .drift-detector-config <<EOF
# Drift Detector Configuration
# Generated by install script
PROJECT=$project
SPACE_ID=$(cub space get $project --json | jq -r .SpaceID)
FILTER_SPACE=$project-filters
CRITICAL_SET_ID=$(cub set get critical-set --space $project --json 2>/dev/null | jq -r .SetID || echo "")
CUB_API_URL=${CUB_API_URL:-https://hub.confighub.com/api}
EOF

echo ""
echo "✅ Installation complete!"
echo ""
echo "Next steps:"
echo "1. Set environment variables:"
echo "   export CUB_TOKEN=\"\$(cub auth get-token)\""
echo "   export CUB_API_URL=\"https://hub.confighub.com/api\""
echo ""
echo "2. Run demo mode:"
echo "   ./drift-detector demo"
echo ""
echo "3. Or run against a real cluster:"
echo "   ./bin/create-cluster  # Create test cluster"
echo "   ./bin/deploy-test     # Deploy test workloads"
echo "   ./drift-detector      # Run drift detection"
echo ""
echo "4. Deploy to production:"
echo "   ./bin/deploy-prod"
echo ""
echo "Project: $project"
echo "Space: $project"
echo "Filters: $project-filters"